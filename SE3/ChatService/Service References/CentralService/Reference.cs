//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatService.CentralService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChatServiceInfo", Namespace="http://schemas.datacontract.org/2004/07/CentralService")]
    [System.SerializableAttribute()]
    public partial class ChatServiceInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string URLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string languageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string usernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string URL {
            get {
                return this.URLField;
            }
            set {
                if ((object.ReferenceEquals(this.URLField, value) != true)) {
                    this.URLField = value;
                    this.RaisePropertyChanged("URL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string language {
            get {
                return this.languageField;
            }
            set {
                if ((object.ReferenceEquals(this.languageField, value) != true)) {
                    this.languageField = value;
                    this.RaisePropertyChanged("language");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string username {
            get {
                return this.usernameField;
            }
            set {
                if ((object.ReferenceEquals(this.usernameField, value) != true)) {
                    this.usernameField = value;
                    this.RaisePropertyChanged("username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CentralService.ICentralService", CallbackContract=typeof(ChatService.CentralService.ICentralServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ICentralService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICentralService/Register", ReplyAction="http://tempuri.org/ICentralService/RegisterResponse")]
        ChatService.CentralService.ChatServiceInfo[] Register(string theme, ChatService.CentralService.ChatServiceInfo chatInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICentralService/Register", ReplyAction="http://tempuri.org/ICentralService/RegisterResponse")]
        System.Threading.Tasks.Task<ChatService.CentralService.ChatServiceInfo[]> RegisterAsync(string theme, ChatService.CentralService.ChatServiceInfo chatInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICentralService/UnRegister", ReplyAction="http://tempuri.org/ICentralService/UnRegisterResponse")]
        string UnRegister(string theme, ChatService.CentralService.ChatServiceInfo chatInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICentralService/UnRegister", ReplyAction="http://tempuri.org/ICentralService/UnRegisterResponse")]
        System.Threading.Tasks.Task<string> UnRegisterAsync(string theme, ChatService.CentralService.ChatServiceInfo chatInfo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICentralServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICentralService/newAnnounce", ReplyAction="http://tempuri.org/ICentralService/newAnnounceResponse")]
        void newAnnounce(ChatService.CentralService.ChatServiceInfo newClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICentralService/newDisconnect", ReplyAction="http://tempuri.org/ICentralService/newDisconnectResponse")]
        void newDisconnect(ChatService.CentralService.ChatServiceInfo leavingClient);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICentralServiceChannel : ChatService.CentralService.ICentralService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CentralServiceClient : System.ServiceModel.DuplexClientBase<ChatService.CentralService.ICentralService>, ChatService.CentralService.ICentralService {
        
        public CentralServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public CentralServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public CentralServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CentralServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CentralServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public ChatService.CentralService.ChatServiceInfo[] Register(string theme, ChatService.CentralService.ChatServiceInfo chatInfo) {
            return base.Channel.Register(theme, chatInfo);
        }
        
        public System.Threading.Tasks.Task<ChatService.CentralService.ChatServiceInfo[]> RegisterAsync(string theme, ChatService.CentralService.ChatServiceInfo chatInfo) {
            return base.Channel.RegisterAsync(theme, chatInfo);
        }
        
        public string UnRegister(string theme, ChatService.CentralService.ChatServiceInfo chatInfo) {
            return base.Channel.UnRegister(theme, chatInfo);
        }
        
        public System.Threading.Tasks.Task<string> UnRegisterAsync(string theme, ChatService.CentralService.ChatServiceInfo chatInfo) {
            return base.Channel.UnRegisterAsync(theme, chatInfo);
        }
    }
}
